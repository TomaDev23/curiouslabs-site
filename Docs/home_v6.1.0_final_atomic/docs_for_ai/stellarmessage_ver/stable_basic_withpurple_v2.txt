// @file src/components/StellarMessage.jsx
// @description A React component for a cosmic text animation with particle effects and constellation lines
// @version 1.6.0 - "Stellar Symphony"

import { useEffect, useRef, useState } from "react";

class AnimationPhaseManager {
  constructor() {
    this.phases = {
      materialization: { duration: 10000, progress: 0 }, // 10s
      constellation: { duration: 5000, progress: 0 }, // 5s
      breathing: { duration: 4000, progress: 0 }, // 4s
      dissolution: { duration: 4000, progress: 0 }, // 4s
    };
    this.currentPhase = "materialization";
    this.startTime = Date.now();
  }

  update() {
    const elapsed = Date.now() - this.startTime;
    const phase = this.phases[this.currentPhase];
    phase.progress = Math.min(elapsed / phase.duration, 1);

    if (phase.progress >= 1) {
      this.nextPhase();
    }
    return { phase: this.currentPhase, progress: phase.progress };
  }

  nextPhase() {
    const phaseOrder = ["materialization", "constellation", "breathing", "dissolution"];
    const currentIndex = phaseOrder.indexOf(this.currentPhase);
    this.currentPhase = phaseOrder[currentIndex < phaseOrder.length - 1 ? currentIndex + 1 : 0];
    this.phases[this.currentPhase].progress = 0;
    this.startTime = Date.now();
    console.log(`🌌 Phase transition: ${this.currentPhase} (${currentIndex + 2}/4) - Duration: ${this.phases[this.currentPhase].duration}ms`);
  }
}

class StellarParticle {
  constructor(options) {
    this.x = options.startX || 0;
    this.y = options.startY || 0;
    this.targetX = options.targetX || 0;
    this.targetY = options.targetY || 0;
    this.forHumansTargetX = options.forHumansTargetX || this.targetX;
    this.forHumansTargetY = options.forHumansTargetY || this.targetY;
    this.char = options.char || "";
    this.word = options.word || "";
    this.isKeyWord = options.isKeyWord || false;
    this.isPurpleWord = options.isPurpleWord || false;
    this.opacity = 0;
    this.size = this.isPurpleWord ? 5 : this.isKeyWord ? 4 : 3;
    this.startX = options.startX || 0;
    this.startY = options.startY || 0;
    this.glowIntensity = this.isPurpleWord ? 15 : this.isKeyWord ? 10 : 5;
    this.flareTimer = Math.random() * 300;
    this.explosionVector = { x: Math.random() * 2 - 1, y: Math.random() * 2 - 1 };
  }

  update(phase, progress) {
    if (phase === "materialization") {
      if (progress < 0.2) {
        // 0-2s: Small explosions (50px)
        const explodeProgress = progress / 0.2;
        const distance = explodeProgress * 50;
        this.x = this.startX + this.explosionVector.x * distance;
        this.y = this.startY + this.explosionVector.y * distance;
        this.opacity = explodeProgress * 0.5;
        this.size = (this.isPurpleWord ? 5 : this.isKeyWord ? 4 : 3) * (0.5 + explodeProgress * 0.5);
      } else {
        // 2-10s: Word formation
        const easeProgress = (progress - 0.2) / 0.8;
        this.x = this.startX + (this.targetX - this.startX) * (1 - Math.pow(1 - easeProgress, 3));
        this.y = this.startY + (this.targetY - this.startY) * (1 - Math.pow(1 - easeProgress, 3));
        this.opacity = easeProgress;
        this.size = (this.isPurpleWord ? 5 : this.isKeyWord ? 4 : 3) * (0.5 + easeProgress * 0.5);
      }
      this.flareTimer += 16;
    } else if (phase === "constellation") {
      // 0-3s: Keyword shapes, 3-5s: Mini-explosions
      this.x = this.targetX + Math.sin(Date.now() * 0.005 + this.targetX * 0.02) * 5;
      this.y = this.targetY + Math.cos(Date.now() * 0.005 + this.targetY * 0.02) * 5;
      this.opacity = 1;
      this.size = (this.isPurpleWord ? 5 : this.isKeyWord ? 4 : 3) * (0.9 + Math.sin(Date.now() * 0.003) * 0.1);
      this.flareTimer += 16;
      if (progress > 0.6) {
        const explodeProgress = (progress - 0.6) / 0.4;
        const distance = explodeProgress * 30;
        this.x += this.explosionVector.x * distance;
        this.y += this.explosionVector.y * distance;
      }
    } else if (phase === "breathing") {
      if (progress < 0.5) {
        // 0-2s: Massive explosion (200px)
        const explodeProgress = progress / 0.5;
        const distance = explodeProgress * 200;
        this.x = this.targetX + this.explosionVector.x * distance;
        this.y = this.targetY + this.explosionVector.y * distance;
        this.opacity = 1 - explodeProgress * 0.4;
        this.size = (this.isPurpleWord ? 5 : this.isKeyWord ? 4 : 3) * (1 + explodeProgress * 0.5);
      } else if (progress < 0.75) {
        // 2-3s: "For Humans"
        const reformProgress = (progress - 0.5) / 0.25;
        const distance = (1 - reformProgress) * 200;
        this.x = this.forHumansTargetX + this.explosionVector.x * distance;
        this.y = this.forHumansTargetY + this.explosionVector.y * distance;
        this.opacity = 0.6 + reformProgress * 0.4;
        this.size = (this.isPurpleWord ? 5 : this.isKeyWord ? 4 : 3) * (1 + reformProgress * 0.2);
      } else {
        // 3-4s: Sentence reformation
        const fadeProgress = (progress - 0.75) / 0.25;
        this.x = this.forHumansTargetX + (this.targetX - this.forHumansTargetX) * fadeProgress;
        this.y = this.forHumansTargetY + (this.targetY - this.forHumansTargetY) * fadeProgress;
        this.opacity = 1 - fadeProgress * 0.5;
        this.size = (this.isPurpleWord ? 5 : this.isKeyWord ? 4 : 3) * (1 - fadeProgress * 0.2);
      }
      this.flareTimer += 16;
    } else if (phase === "dissolution") {
      // Spiral and fade
      const centerX = this.canvas?.width / 2 || window.innerWidth / 2;
      const centerY = this.canvas?.height / 2 || window.innerHeight / 2;
      const angle = Math.atan2(this.targetY - centerY, this.targetX - centerX);
      const spiralAngle = angle + progress * Math.PI;
      const distance = progress * 150;
      this.x = this.targetX + Math.cos(spiralAngle) * distance;
      this.y = this.targetY + Math.sin(spiralAngle) * distance;
      this.opacity = Math.max(0, 1 - progress);
      this.size = (this.isPurpleWord ? 5 : this.isKeyWord ? 4 : 3) * (1 - progress * 0.3);
      this.flareTimer += 16;
    }
  }

  draw(ctx) {
    if (this.opacity <= 0) return;
    ctx.save();
    ctx.globalAlpha = this.opacity;
    if (this.isPurpleWord && this.opacity > 0.3) {
      ctx.shadowBlur = this.glowIntensity;
      ctx.shadowColor = "#800080";
    } else if (this.isKeyWord && this.opacity > 0.3) {
      ctx.shadowBlur = this.glowIntensity;
      ctx.shadowColor = "#FF6B35";
    }
    ctx.fillStyle = this.isPurpleWord ? "#800080" : this.isKeyWord ? "#FF6B35" : "#FFFFFF";
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
    ctx.fill();
    ctx.restore();
  }
}

class ConstellationLine {
  constructor(startParticle, endParticle, concept, delay = 0, isMini = false) {
    this.start = startParticle;
    this.end = endParticle;
    this.concept = concept;
    this.opacity = 0;
    this.pulseOffset = Math.random() * Math.PI * 2;
    this.delay = delay;
    this.glowPosition = 0;
    this.isMini = isMini;
    this.controlX = (startParticle.targetX + endParticle.targetX) / 2 + (Math.random() - 0.5) * 50;
    this.controlY = (startParticle.targetY + endParticle.targetY) / 2 + (Math.random() - 0.5) * 50;
  }

  draw(ctx, phase, progress) {
    if (this.opacity <= 0) return;
    ctx.save();
    let lineProgress = 1;
    if (phase === "materialization" && this.isMini) {
      const delayedProgress = Math.max(0, (progress - 0.2) / 0.4 - this.delay);
      lineProgress = Math.min(1, delayedProgress);
    } else if (phase === "constellation" && !this.isMini) {
      const delayedProgress = Math.max(0, progress - this.delay);
      lineProgress = Math.min(1, delayedProgress / (1 - this.delay));
    }
    if (phase === "breathing" && !this.isMini) {
      const time = Date.now() * 0.004;
      const pulse = Math.sin(time + this.pulseOffset) * 0.4 + 0.6;
      ctx.globalAlpha = this.opacity * pulse;
    } else {
      ctx.globalAlpha = this.opacity;
    }
    const hueShift = Math.sin(Date.now() * 0.001 + this.pulseOffset) * 0.1;
    const baseColor = hueShift > 0 ? "#FFA500" : "#FF8C42";
    ctx.shadowBlur = 10;
    ctx.shadowColor = baseColor;
    ctx.strokeStyle = baseColor;
    ctx.lineWidth = this.isMini ? 2 : 3;
    ctx.beginPath();
    ctx.moveTo(this.start.x, this.start.y);
    const endX = this.start.x + (this.end.x - this.start.x) * lineProgress;
    const endY = this.start.y + (this.end.y - this.start.y) * lineProgress;
    const controlX = this.start.x + (this.controlX - this.start.x) * lineProgress;
    const controlY = this.start.y + (this.controlY - this.start.y) * lineProgress;
    ctx.quadraticCurveTo(controlX, controlY, endX, endY);
    ctx.stroke();
    if (((phase === "materialization" && this.isMini && lineProgress >= 1) ||
         (phase === "constellation" && !this.isMini && lineProgress >= 1) ||
         (phase === "breathing" && !this.isMini))) {
      this.glowPosition = (this.glowPosition + 0.02) % 1;
      const t = this.glowPosition;
      const glowX = this.start.x * (1 - t) * (1 - t) + 2 * this.controlX * t * (1 - t) + this.end.x * t * t;
      const glowY = this.start.y * (1 - t) * (1 - t) + 2 * this.controlY * t * (1 - t) + this.end.y * t * t;
      ctx.shadowBlur = 20;
      ctx.shadowColor = "#FFD700";
      ctx.fillStyle = "#FFD700";
      ctx.beginPath();
      ctx.arc(glowX, glowY, 4, 0, Math.PI * 2);
      ctx.fill();
    }
    if (lineProgress > 0 && lineProgress < 1 && ((phase === "materialization" && this.isMini) || (phase === "constellation" && !this.isMini))) {
      ctx.shadowBlur = 20;
      ctx.shadowColor = "#FFD700";
      ctx.fillStyle = "#FFD700";
      ctx.beginPath();
      ctx.arc(endX, endY, 4, 0, Math.PI * 2);
      ctx.fill();
      for (let i = 1; i <= 3; i++) {
        const trailProgress = Math.max(0, lineProgress - i * 0.1);
        if (trailProgress > 0) {
          const t = trailProgress;
          const trailX = this.start.x * (1 - t) * (1 - t) + 2 * this.controlX * t * (1 - t) + this.end.x * t * t;
          const trailY = this.start.y * (1 - t) * (1 - t) + 2 * this.controlY * t * (1 - t) + this.end.y * t * t;
          ctx.globalAlpha = this.opacity * (0.6 - i * 0.15);
          ctx.beginPath();
          ctx.arc(trailX, trailY, 2, 0, Math.PI * 2);
          ctx.fill();
        }
      }
    }
    ctx.restore();
  }
}

class StellarMessage {
  constructor() {
    this.containerId = "stellar-message-container";
    this.canvasId = "stellar-message-canvas";
    this.isActive = false;
    this.isPaused = false;
    this.isInitialized = false;
    this.container = null;
    this.canvas = null;
    this.ctx = null;
    this.particles = [];
    this.constellations = [];
    this.miniConstellations = [];
    this.keyWordMap = new Map();
    this.animationId = null;
    this.pausedTime = 0;
    this.flares = [];
    this.globalOpacity = 1;
  }

  init(container) {
    if (this.isInitialized) return;
    console.log("🌌 Initializing StellarMessage...");
    this.container = container;
    this.container.id = this.containerId;
    this.container.style.cssText = `
      position: absolute;
      width: 100%;
      height: 100%;
      pointer-events: none;
      opacity: 0;
      transition: opacity 0.3s ease;
      z-index: 9999;
    `;
    this.canvas = document.createElement("canvas");
    this.canvas.id = this.canvasId;
    this.canvas.style.cssText = `
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: transparent;
    `;
    this.ctx = this.canvas.getContext("2d");
    this.container.appendChild(this.canvas);
    this.setupEventListeners();
    this.isInitialized = true;
    this.activate();
  }

  setupEventListeners() {
    window.addEventListener("resize", () => {
      if (this.isActive && this.canvas) {
        this.canvas.width = this.container.clientWidth;
        this.canvas.height = this.container.clientHeight;
        this.convertTextToParticles();
        this.createConstellations();
        console.log(`🌌 Canvas resized: ${this.canvas.width}x${this.canvas.height}`);
      }
    });
  }

  activate() {
    if (this.isActive) return;
    this.isActive = true;
    this.container.style.opacity = "1";
    this.canvas.width = this.container.clientWidth;
    this.canvas.height = this.container.clientHeight;
    if (this.canvas.width === 0 || this.canvas.height === 0) {
      console.error("🌌 Error: Invalid canvas dimensions");
      return;
    }
    console.log(`🌌 Canvas set: ${this.canvas.width}x${this.canvas.height}`);
    this.phaseManager = new AnimationPhaseManager();
    this.convertTextToParticles();
    this.createConstellations();
    this.startRenderLoop();
  }

  deactivate() {
    console.log("🌌 Deactivating StellarMessage...");
    this.stopRenderLoop();
    if (this.container) this.container.style.opacity = "0";
    if (this.ctx) this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.phaseManager = null;
    this.isActive = false;
  }

  destroy() {
    this.deactivate();
    if (this.container && this.container.parentNode) {
      this.container.parentNode.removeChild(this.container);
    }
    this.isInitialized = false;
    console.log("🌌 StellarMessage destroyed");
  }

  convertTextToParticles() {
    console.log("🌌 Converting text to particles...");
    this.particles = [];
    this.keyWordMap.clear();
    const message = "We Care, We Create: Ethical, responsible products with humans at the core.";
    const keyWords = ["Care", "Create", "Ethical", "responsible", "humans", "core"];
    const purpleWord = "humans";
    const forHumansText = "For Humans";
    const lines = [
      "We Care, We Create: Ethical,",
      "responsible products with humans",
      "at the core.",
    ];
    const fontSize = 80;
    const lineHeight = fontSize * 1.6;
    const canvasWidth = this.canvas.width;
    const canvasHeight = this.canvas.height;

    if (canvasWidth === 0 || canvasHeight === 0) {
      console.error("🌌 Error: Invalid canvas dimensions");
      return;
    }

    this.ctx.font = `${fontSize}px Arial, sans-serif`;
    const testWidth = this.ctx.measureText("Test").width;
    if (testWidth === 0) {
      console.error("🌌 Error: Font measurement failed");
      this.ctx.font = `${fontSize}px sans-serif`;
    }
    console.log(`🌌 Font set: ${this.ctx.font}, testWidth=${testWidth}`);

    const tempCanvas = document.createElement("canvas");
    tempCanvas.width = fontSize * 2;
    tempCanvas.height = fontSize * 2;
    const tempCtx = tempCanvas.getContext("2d");
    tempCtx.font = this.ctx.font;
    tempCtx.fillStyle = "#FFFFFF";
    tempCtx.textBaseline = "middle";

    const startY = (canvasHeight - lines.length * lineHeight) / 2;
    const forHumansWidth = this.ctx.measureText(forHumansText).width;
    const forHumansX = (canvasWidth - forHumansWidth) / 2;
    const forHumansY = canvasHeight / 2;

    let forHumansParticles = 0;
    lines.forEach((line, lineIndex) => {
      const lineWidth = this.ctx.measureText(line).width;
      const startX = (canvasWidth - lineWidth) / 2;
      let currentX = startX;
      const currentY = startY + lineIndex * lineHeight;

      const words = line.split(" ");
      words.forEach((word, wordIndex) => {
        const cleanWord = word.replace(/[^\w]/g, "");
        const isKeyWord = keyWords.includes(cleanWord);
        const isPurpleWord = cleanWord === purpleWord;
        const wordWidth = this.ctx.measureText(word).width;
        const wordParticles = [];

        let charX = currentX;
        for (let charIndex = 0; charIndex < word.length; charIndex++) {
          const char = word[charIndex];
          const charWidth = this.ctx.measureText(char).width;
          const particlesPerChar = isPurpleWord ? 10 : isKeyWord ? 20 : 10;

          tempCtx.clearRect(0, 0, tempCanvas.width, tempCanvas.height);
          tempCtx.fillText(char, fontSize / 2, fontSize);

          const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
          const points = [];
          for (let y = 0; y < tempCanvas.height; y += 4) {
            for (let x = 0; x < tempCanvas.width; x += 4) {
              const index = (y * tempCanvas.width + x) * 4;
              if (imageData.data[index + 3] > 128) {
                points.push({ x: x - fontSize / 2, y: y - fontSize });
              }
            }
          }

          const selectedPoints = [];
          const maxPoints = Math.min(particlesPerChar, points.length);
          while (selectedPoints.length < maxPoints && points.length > 0) {
            const index = Math.floor(Math.random() * points.length);
            selectedPoints.push(points.splice(index, 1)[0]);
          }

          selectedPoints.forEach((point) => {
            const particleX = charX + point.x * (fontSize / tempCanvas.width);
            const particleY = currentY + point.y * (fontSize / tempCanvas.height);
            const angle = Math.random() * Math.PI * 2;
            const distance = 500 + Math.random() * 600;
            const randomStartX = particleX + Math.cos(angle) * distance;
            const randomStartY = particleY + Math.sin(angle) * distance;

            let forHumansTargetX = particleX;
            let forHumansTargetY = particleY;
            if (cleanWord === "humans" || (lineIndex === 2 && wordIndex === 0 && charIndex < 3)) {
              const isHumanWord = cleanWord === "humans";
              const charPos = isHumanWord ? charIndex : charIndex + 4;
              let targetX = forHumansX;
              for (let j = 0; j < charPos; j++) {
                targetX += this.ctx.measureText(forHumansText[j]).width;
              }
              forHumansTargetX = targetX + point.x * (fontSize / tempCanvas.width);
              forHumansTargetY = forHumansY + point.y * (fontSize / tempCanvas.height);
              forHumansParticles++;
            }

            const particle = new StellarParticle({
              startX: randomStartX,
              startY: randomStartY,
              targetX: particleX,
              targetY: particleY,
              forHumansTargetX,
              forHumansTargetY,
              char,
              word: cleanWord,
              isKeyWord,
              isPurpleWord,
            });
            this.particles.push(particle);
            wordParticles.push(particle);
          });

          charX += charWidth;
        }

        if (isKeyWord && wordParticles.length > 0) {
          const centerParticle = wordParticles[Math.floor(wordParticles.length / 2)];
          this.keyWordMap.set(cleanWord, centerParticle);
        }

        currentX += wordWidth + this.ctx.measureText(" ").width;
      });
    });

    console.log(`✨ Assigned ${forHumansParticles} particles to 'For Humans'`);
    this.miniConstellations = [];
    for (let i = 0; i < 20; i++) {
      const p1 = this.particles[Math.floor(Math.random() * this.particles.length)];
      const p2 = this.particles[Math.floor(Math.random() * this.particles.length)];
      if (p1 !== p2 && Math.hypot(p1.targetX - p2.targetX, p1.targetY - p2.targetY) < 100) {
        this.miniConstellations.push(new ConstellationLine(p1, p2, `mini-${i}`, Math.random() * 0.5, true));
      }
    }
    console.log(`✨ Created ${this.miniConstellations.length} mini-constellation lines`);
    console.log(`✨ Created ${this.particles.length} particles`);
    console.log(`✨ Mapped ${this.keyWordMap.size} key words:`, Array.from(this.keyWordMap.keys()));
  }

  createConstellations() {
    console.log("🌌 Creating constellation connections...");
    this.constellations = [];
    const connections = [
      ["Care", "humans"],
      ["Create", "Ethical"],
      ["humans", "core"],
      ["responsible", "core"],
      ["Care", "core"],
      ["Create", "humans"],
    ];
    connections.forEach(([word1, word2], index) => {
      const particle1 = this.keyWordMap.get(word1);
      const particle2 = this.keyWordMap.get(word2);
      if (particle1 && particle2) {
        const delay = index * 0.2;
        this.constellations.push(new ConstellationLine(particle1, particle2, `${word1}-${word2}`, delay));
        console.log(`🌌 Created constellation: ${word1} → ${word2} (delay: ${delay.toFixed(1)})`);
      }
    });
    console.log(`✨ Created ${this.constellations.length} constellation lines`);
  }

  startRenderLoop() {
    if (this.animationId) cancelAnimationFrame(this.animationId);
    const render = () => {
      if (!this.isActive || !this.phaseManager) return;
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

      if (!this.isPaused) {
        const phaseData = this.phaseManager.update();
        this.globalOpacity = phaseData.phase === "dissolution" && phaseData.progress > 0.75
          ? 1 - (phaseData.progress - 0.75) / 0.25
          : phaseData.phase === "materialization" && phaseData.progress < 0.25
            ? phaseData.progress / 0.25
            : 1;

        this.ctx.globalAlpha = this.globalOpacity;
        this.particles.forEach((particle) => {
          particle.canvas = this.canvas;
          particle.update(phaseData.phase, phaseData.progress);
          particle.draw(this.ctx);
          if ((phaseData.phase === "materialization" || phaseData.phase === "constellation" || phaseData.phase === "breathing") &&
              particle.flareTimer > 300 && this.flares.length < 100) {
            this.flares.push({
              x: particle.x,
              y: particle.y,
              size: (particle.isPurpleWord ? 5 : particle.isKeyWord ? 4 : 3) * 0.5,
              opacity: 0.8,
              life: 0,
              color: particle.isPurpleWord ? "#800080" : particle.isKeyWord ? "#FF6B35" : "#FFFFFF",
              vx: (Math.random() - 0.5) * 2,
              vy: (Math.random() - 0.5) * 2,
            });
            particle.flareTimer = 0;
          }
        });

        this.flares = this.flares.filter(flare => flare.life < 1);
        this.flares.forEach(flare => {
          flare.x += flare.vx;
          flare.y += flare.vy;
          flare.life += 0.02;
          flare.opacity = 0.8 * (1 - flare.life);
          flare.size *= 0.95;
          this.ctx.save();
          this.ctx.globalAlpha = flare.opacity * this.globalOpacity;
          this.ctx.shadowBlur = 10;
          this.ctx.shadowColor = flare.color;
          this.ctx.fillStyle = flare.color;
          this.ctx.beginPath();
          this.ctx.arc(flare.x, flare.y, flare.size, 0, Math.PI * 2);
          this.ctx.fill();
          this.ctx.restore();
        });

        if (phaseData.phase === "materialization" && phaseData.progress > 0.2 && phaseData.progress < 0.6) {
          this.miniConstellations.forEach(line => {
            line.opacity = 1;
            line.draw(this.ctx, phaseData.phase, phaseData.progress);
          });
        } else if (phaseData.phase === "constellation" || phaseData.phase === "breathing") {
          this.constellations.forEach(line => {
            line.opacity = phaseData.phase === "breathing" && phaseData.progress > 0.5 ? 0 : 1;
            line.draw(this.ctx, phaseData.phase, phaseData.progress);
          });
        } else if (phaseData.phase === "dissolution") {
          this.constellations.forEach(line => {
            line.opacity = Math.max(0, 1 - phaseData.progress);
            line.draw(this.ctx, phaseData.phase, phaseData.progress);
          });
        }

        let enhancerOpacity = phaseData.phase === "materialization" && phaseData.progress >= 0.75
          ? ((phaseData.progress - 0.75) / 0.25) * 0.4
          : (phaseData.phase === "constellation" || phaseData.phase === "breathing") ? 0.4 : 0;

        if (enhancerOpacity > 0) {
          this.particles.forEach((p) => {
            const targetX = phaseData.phase === "breathing" && phaseData.progress >= 0.5 && phaseData.progress < 0.75
              ? p.forHumansTargetX : p.targetX;
            const targetY = phaseData.phase === "breathing" && phaseData.progress >= 0.5 && phaseData.progress < 0.75
              ? p.forHumansTargetY : p.targetY;
            this.ctx.save();
            this.ctx.globalAlpha = enhancerOpacity * this.globalOpacity;
            if (p.isPurpleWord) {
              this.ctx.shadowBlur = 8;
              this.ctx.shadowColor = "#800080";
              this.ctx.fillStyle = "#800080";
            } else if (p.isKeyWord) {
              this.ctx.shadowBlur = 8;
              this.ctx.shadowColor = "#FF6B35";
              this.ctx.fillStyle = "#FF6B35";
            } else {
              this.ctx.shadowBlur = 4;
              this.ctx.shadowColor = "#FFFFFF";
              this.ctx.fillStyle = "#FFFFFF";
            }
            this.ctx.beginPath();
            this.ctx.arc(targetX, targetY, 2, 0, Math.PI * 2);
            this.ctx.fill();
            this.ctx.restore();
          });
        }

        if (phaseData.phase === "breathing" && phaseData.progress >= 0.5 && phaseData.progress < 0.75) {
          // Calculate "For Humans" positioning dynamically
          const fontSize = 80;
          const forHumansText = "For Humans";
          this.ctx.font = `${fontSize}px Arial, sans-serif`;
          const forHumansWidth = this.ctx.measureText(forHumansText).width;
          const forHumansX = (this.canvas.width - forHumansWidth) / 2;
          const forHumansY = this.canvas.height / 2;
          
          this.ctx.save();
          this.ctx.globalAlpha = 0.4 * this.globalOpacity;
          this.ctx.fillStyle = "#800080";
          this.ctx.shadowBlur = 10;
          this.ctx.shadowColor = "#800080";
          this.ctx.fillText(forHumansText, forHumansX, forHumansY);
          this.ctx.restore();
        }

        if ((phaseData.phase === "materialization" && phaseData.progress < 0.2) ||
            (phaseData.phase === "breathing" && phaseData.progress < 0.5)) {
          this.particles.forEach(p => {
            if (Math.random() < 0.1 && this.flares.length < 100) {
              this.flares.push({
                x: p.x,
                y: p.y,
                size: (p.isPurpleWord ? 5 : p.isKeyWord ? 4 : 3) * 0.3,
                opacity: 0.6,
                life: 0,
                color: p.isPurpleWord ? "#800080" : p.isKeyWord ? "#FF6B35" : "#FFFFFF",
                vx: p.explosionVector.x * 0.5,
                vy: p.explosionVector.y * 0.5,
              });
            }
          });
        }
      }

      this.drawDebugHUD(this.phaseManager.currentPhase, this.phaseManager.phases[this.phaseManager.currentPhase].progress);
      this.animationId = requestAnimationFrame(render);
    };
    this.animationId = requestAnimationFrame(render);
    console.log("🌌 Render loop started");
  }

  stopRenderLoop() {
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = null;
    }
  }

  drawDebugHUD(phase, progress) {
    this.ctx.save();
    this.ctx.font = "16px monospace";
    this.ctx.fillStyle = "#00FF00";
    this.ctx.shadowBlur = 0;
    this.ctx.globalAlpha = 1;
    const y = 200;
    const lineHeight = 20;
    let currentY = y;
    this.ctx.fillText(this.isPaused ? "⏸️ PAUSED" : "▶️ PLAYING", 20, currentY);
    currentY += lineHeight;
    this.ctx.fillText(`Phase: ${phase} (${(progress * 100).toFixed(1)}%)`, 20, currentY);
    currentY += lineHeight;
    const barWidth = 300;
    const barHeight = 10;
    this.ctx.strokeStyle = "#00FF00";
    this.ctx.strokeRect(20, currentY, barWidth, barHeight);
    this.ctx.fillStyle = "#00FF00";
    this.ctx.fillRect(20, currentY, barWidth * progress, barHeight);
    currentY += lineHeight + 5;
    this.ctx.fillText(`Particles: ${this.particles.length}`, 20, currentY);
    currentY += lineHeight;
    this.ctx.fillText(`Flares: ${this.flares.length}`, 20, currentY);
    currentY += lineHeight;
    this.ctx.fillText(`Canvas: ${this.canvas.width}x${this.canvas.height}`, 20, currentY);
    this.ctx.restore();
  }

  togglePause() {
    this.isPaused = !this.isPaused;
    if (this.isPaused) {
      this.pausedTime = Date.now();
    } else {
      const pauseDuration = Date.now() - this.pausedTime;
      this.phaseManager.startTime += pauseDuration;
    }
    console.log(`🌌 Animation ${this.isPaused ? "paused" : "resumed"}`);
    return this.isPaused;
  }
}

export const StellarMessageComponent = () => {
  const containerRef = useRef(null);
  const stellarRef = useRef(null);
  const [isPaused, setIsPaused] = useState(false);

  useEffect(() => {
    stellarRef.current = new StellarMessage();
    const initialize = () => {
      if (containerRef.current && !stellarRef.current.isInitialized) {
        const rect = containerRef.current.getBoundingClientRect();
        if (rect.width > 0 && rect.height > 0) {
          stellarRef.current.init(containerRef.current);
          return true;
        }
      }
      return false;
    };
    const timer = setTimeout(() => {
      if (!initialize()) {
        const retryTimer = setInterval(() => {
          if (initialize()) clearInterval(retryTimer);
        }, 100);
        return () => clearInterval(retryTimer);
      }
    }, 100);
    return () => {
      clearTimeout(timer);
      if (stellarRef.current) stellarRef.current.destroy();
    };
  }, []);

  return (
    <div
      ref={containerRef}
      style={{ position: "relative", width: "100%", height: "100vh", background: "black" }}
    >
      <button
        onClick={() => setIsPaused(stellarRef.current.togglePause())}
        style={{
          position: "absolute",
          top: "10px",
          right: "10px",
          zIndex: 10000,
          padding: "10px 20px",
          background: "#1E90FF",
          color: "white",
          border: "none",
          borderRadius: "5px",
          cursor: "pointer",
        }}
      >
        {isPaused ? "Resume" : "Pause"}
      </button>
    </div>
  );
};

export default StellarMessageComponent;