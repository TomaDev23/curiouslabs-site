<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <pattern id="legit-code" width="800" height="600" patternUnits="userSpaceOnUse">
      <!-- Clean code pattern content -->
      <g opacity="0.15">
        <!-- Main function with proper documentation -->
        <text x="50" y="50" font-family="monospace" font-size="9" fill="white" opacity="0.2">/**</text>
        <text x="50" y="65" font-family="monospace" font-size="9" fill="white" opacity="0.2"> * Processes incoming data and validates against schema</text>
        <text x="50" y="80" font-family="monospace" font-size="9" fill="white" opacity="0.2"> * @param {Object} data - The input data object</text>
        <text x="50" y="95" font-family="monospace" font-size="9" fill="white" opacity="0.2"> * @param {Object} options - Processing options</text>
        <text x="50" y="110" font-family="monospace" font-size="9" fill="white" opacity="0.2"> * @returns {Promise<Object>} - Processed data result</text>
        <text x="50" y="125" font-family="monospace" font-size="9" fill="white" opacity="0.2"> */</text>
        <text x="50" y="140" font-family="monospace" font-size="9" fill="white" opacity="0.2">async function processData(data, options = {}) {</text>
        <text x="50" y="155" font-family="monospace" font-size="9" fill="white" opacity="0.2">  // Validate input</text>
        <text x="50" y="170" font-family="monospace" font-size="9" fill="white" opacity="0.2">  const validationResult = await validate(data);</text>
        <text x="50" y="185" font-family="monospace" font-size="9" fill="white" opacity="0.2">  </text>
        <text x="50" y="200" font-family="monospace" font-size="9" fill="white" opacity="0.2">  if (!validationResult.isValid) {</text>
        <text x="50" y="215" font-family="monospace" font-size="9" fill="white" opacity="0.2">    logger.warn('Invalid data received', { errors: validationResult.errors });</text>
        <text x="50" y="230" font-family="monospace" font-size="9" fill="white" opacity="0.2">    return { </text>
        <text x="50" y="245" font-family="monospace" font-size="9" fill="white" opacity="0.2">      success: false,</text>
        <text x="50" y="260" font-family="monospace" font-size="9" fill="white" opacity="0.2">      errors: validationResult.errors</text>
        <text x="50" y="275" font-family="monospace" font-size="9" fill="white" opacity="0.2">    };</text>
        <text x="50" y="290" font-family="monospace" font-size="9" fill="white" opacity="0.2">  }</text>
        <text x="50" y="305" font-family="monospace" font-size="9" fill="white" opacity="0.2">  </text>
        <text x="50" y="320" font-family="monospace" font-size="9" fill="white" opacity="0.2">  try {</text>
        <text x="50" y="335" font-family="monospace" font-size="9" fill="white" opacity="0.2">    // Apply transformations</text>
        <text x="50" y="350" font-family="monospace" font-size="9" fill="white" opacity="0.2">    const result = await transformer.apply(data, {</text>
        <text x="50" y="365" font-family="monospace" font-size="9" fill="white" opacity="0.2">      version: options.version || 'latest',</text>
        <text x="50" y="380" font-family="monospace" font-size="9" fill="white" opacity="0.2">      optimize: options.optimize ?? true</text>
        <text x="50" y="395" font-family="monospace" font-size="9" fill="white" opacity="0.2">    });</text>
        <text x="50" y="410" font-family="monospace" font-size="9" fill="white" opacity="0.2">    </text>
        <text x="50" y="425" font-family="monospace" font-size="9" fill="white" opacity="0.2">    return {</text>
        <text x="50" y="440" font-family="monospace" font-size="9" fill="white" opacity="0.2">      success: true,</text>
        <text x="50" y="455" font-family="monospace" font-size="9" fill="white" opacity="0.2">      data: result,</text>
        <text x="50" y="470" font-family="monospace" font-size="9" fill="white" opacity="0.2">      metadata: {</text>
        <text x="50" y="485" font-family="monospace" font-size="9" fill="white" opacity="0.2">        processedAt: new Date().toISOString(),</text>
        <text x="50" y="500" font-family="monospace" font-size="9" fill="white" opacity="0.2">        version: options.version || 'latest'</text>
        <text x="50" y="515" font-family="monospace" font-size="9" fill="white" opacity="0.2">      }</text>
        <text x="50" y="530" font-family="monospace" font-size="9" fill="white" opacity="0.2">    };</text>
        <text x="50" y="545" font-family="monospace" font-size="9" fill="white" opacity="0.2">  } catch (error) {</text>
        <text x="50" y="560" font-family="monospace" font-size="9" fill="white" opacity="0.2">    logger.error('Processing failed', { error });</text>
        <text x="50" y="575" font-family="monospace" font-size="9" fill="white" opacity="0.2">    throw new ProcessingError(error.message, { cause: error });</text>
        <text x="50" y="590" font-family="monospace" font-size="9" fill="white" opacity="0.2">  }</text>
        <text x="50" y="605" font-family="monospace" font-size="9" fill="white" opacity="0.2">}</text>

        <!-- Clean architecture structure on right side -->
        <text x="450" y="50" font-family="monospace" font-size="9" fill="white" opacity="0.15">// schemas/dataSchema.js</text>
        <text x="450" y="80" font-family="monospace" font-size="9" fill="white" opacity="0.15">// services/validator.js</text>
        <text x="450" y="110" font-family="monospace" font-size="9" fill="white" opacity="0.15">// services/transformer.js</text>
        <text x="450" y="140" font-family="monospace" font-size="9" fill="white" opacity="0.15">// utils/logger.js</text>
        <text x="450" y="170" font-family="monospace" font-size="9" fill="white" opacity="0.15">// errors/ProcessingError.js</text>
        <text x="450" y="200" font-family="monospace" font-size="9" fill="white" opacity="0.15">// controllers/dataController.js</text>
        
        <!-- Code structure indentations -->
        <line x1="45" y1="50" x2="45" y2="605" stroke="white" stroke-width="0.5" opacity="0.05" />
        <line x1="445" y1="50" x2="445" y2="200" stroke="white" stroke-width="0.5" opacity="0.05" />
        
        <!-- Horizontal guidelines -->
        <line x1="30" y1="125" x2="400" y2="125" stroke="white" stroke-width="0.2" opacity="0.03" />
        <line x1="30" y1="305" x2="400" y2="305" stroke="white" stroke-width="0.2" opacity="0.03" />
        <line x1="30" y1="425" x2="400" y2="425" stroke="white" stroke-width="0.2" opacity="0.03" />
        
        <!-- Import section at top -->
        <text x="50" y="20" font-family="monospace" font-size="9" fill="white" opacity="0.1">import { validate } from './services/validator';</text>
        <text x="50" y="35" font-family="monospace" font-size="9" fill="white" opacity="0.1">import { transformer } from './services/transformer';</text>
        <text x="450" y="20" font-family="monospace" font-size="9" fill="white" opacity="0.1">import { logger } from './utils/logger';</text>
        <text x="450" y="35" font-family="monospace" font-size="9" fill="white" opacity="0.1">import { ProcessingError } from './errors/ProcessingError';</text>
      </g>
    </pattern>
  </defs>
  
  <!-- Apply the pattern -->
  <rect width="100%" height="100%" fill="url(#legit-code)" />
</svg> 