<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="fade-gradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" stop-color="white" stop-opacity="0.3" />
      <stop offset="100%" stop-color="white" stop-opacity="0.05" />
    </linearGradient>
    
    <pattern id="transition-pattern" width="800" height="600" patternUnits="userSpaceOnUse">
      <!-- Left side (chaotic) -->
      <g opacity="0.2">
        <text x="10" y="20" font-family="monospace" font-size="10" fill="white" opacity="0.35">if (error) { throw new Error(); }</text>
        <text x="40" y="40" font-family="monospace" font-size="8" fill="white" opacity="0.25">{random.choice(options)}</text>
        <text x="15" y="60" font-family="monospace" font-size="9" fill="#ff6666" opacity="0.3">ERROR: undefined is not a function</text>
        <text x="30" y="80" font-family="monospace" font-size="7" fill="white" opacity="0.2">console.error(e.message);</text>
        <text x="5" y="100" font-family="monospace" font-size="12" fill="white" opacity="0.25">!@#$%^</text>
        <text x="35" y="125" font-family="monospace" font-size="10" fill="#ffcc00" opacity="0.25">warning: unused variable</text>
        <text x="20" y="150" font-family="monospace" font-size="9" fill="white" opacity="0.2">function runThis() { runThat(); }</text>
      </g>

      <!-- Middle left (starting transition) -->
      <g opacity="0.18">
        <text x="150" y="40" font-family="monospace" font-size="9" fill="white" opacity="0.25">try {</text>
        <text x="160" y="55" font-family="monospace" font-size="9" fill="white" opacity="0.25">  data = parse(input);</text>
        <text x="160" y="70" font-family="monospace" font-size="9" fill="white" opacity="0.25">  if(!data) return;</text>
        <text x="160" y="85" font-family="monospace" font-size="9" fill="#ff6666" opacity="0.2">  return data.sort().map()</text>
        <text x="160" y="100" font-family="monospace" font-size="9" fill="white" opacity="0.25">} catch(e) {</text>
        <text x="160" y="115" font-family="monospace" font-size="9" fill="white" opacity="0.25">  logError(e);</text>
        <text x="160" y="130" font-family="monospace" font-size="9" fill="white" opacity="0.25">}</text>
      </g>

      <!-- Middle (transition core) -->
      <g opacity="0.15">
        <line x1="250" y1="0" x2="250" y2="600" stroke="url(#fade-gradient)" stroke-width="150" />
        <line x1="400" y1="0" x2="400" y2="600" stroke="url(#fade-gradient)" stroke-width="150" />
        <line x1="550" y1="0" x2="550" y2="600" stroke="url(#fade-gradient)" stroke-width="150" />
        
        <text x="300" y="50" font-family="monospace" font-size="9" fill="white" opacity="0.22">function process(data) {</text>
        <text x="310" y="65" font-family="monospace" font-size="9" fill="white" opacity="0.22">  // Validation</text>
        <text x="310" y="80" font-family="monospace" font-size="9" fill="white" opacity="0.22">  if (!data) return null;</text>
        <text x="310" y="95" font-family="monospace" font-size="9" fill="white" opacity="0.22">  </text>
        <text x="310" y="110" font-family="monospace" font-size="9" fill="white" opacity="0.22">  try {</text>
        <text x="310" y="125" font-family="monospace" font-size="9" fill="white" opacity="0.22">    return transform(data);</text>
        <text x="310" y="140" font-family="monospace" font-size="9" fill="white" opacity="0.22">  } catch (err) {</text>
        <text x="310" y="155" font-family="monospace" font-size="9" fill="white" opacity="0.22">    logger.error(err);</text>
        <text x="310" y="170" font-family="monospace" font-size="9" fill="white" opacity="0.22">    return fallback;</text>
        <text x="310" y="185" font-family="monospace" font-size="9" fill="white" opacity="0.22">  }</text>
        <text x="300" y="200" font-family="monospace" font-size="9" fill="white" opacity="0.22">}</text>
      </g>

      <!-- Middle right (structured beginning) -->
      <g opacity="0.13">
        <text x="450" y="300" font-family="monospace" font-size="9" fill="white" opacity="0.18">// Structured validation</text>
        <text x="450" y="315" font-family="monospace" font-size="9" fill="white" opacity="0.18">function validateInput(data) {</text>
        <text x="450" y="330" font-family="monospace" font-size="9" fill="white" opacity="0.18">  const schema = getSchema();</text>
        <text x="450" y="345" font-family="monospace" font-size="9" fill="white" opacity="0.18">  </text>
        <text x="450" y="360" font-family="monospace" font-size="9" fill="white" opacity="0.18">  return validator.validate(</text>
        <text x="450" y="375" font-family="monospace" font-size="9" fill="white" opacity="0.18">    data,</text>
        <text x="450" y="390" font-family="monospace" font-size="9" fill="white" opacity="0.18">    schema,</text>
        <text x="450" y="405" font-family="monospace" font-size="9" fill="white" opacity="0.18">    options</text>
        <text x="450" y="420" font-family="monospace" font-size="9" fill="white" opacity="0.18">  );</text>
        <text x="450" y="435" font-family="monospace" font-size="9" fill="white" opacity="0.18">}</text>
      </g>

      <!-- Right side (organized) -->
      <g opacity="0.1">
        <text x="600" y="50" font-family="monospace" font-size="9" fill="white" opacity="0.15">/**</text>
        <text x="600" y="65" font-family="monospace" font-size="9" fill="white" opacity="0.15"> * Process incoming data safely</text>
        <text x="600" y="80" font-family="monospace" font-size="9" fill="white" opacity="0.15"> * @param {Object} data - Input data</text>
        <text x="600" y="95" font-family="monospace" font-size="9" fill="white" opacity="0.15"> * @returns {Object} - Processed result</text>
        <text x="600" y="110" font-family="monospace" font-size="9" fill="white" opacity="0.15"> */</text>
        <text x="600" y="125" font-family="monospace" font-size="9" fill="white" opacity="0.15">function processData(data) {</text>
        <text x="600" y="140" font-family="monospace" font-size="9" fill="white" opacity="0.15">  if (!isValid(data)) {</text>
        <text x="600" y="155" font-family="monospace" font-size="9" fill="white" opacity="0.15">    return defaultResponse;</text>
        <text x="600" y="170" font-family="monospace" font-size="9" fill="white" opacity="0.15">  }</text>
        <text x="600" y="185" font-family="monospace" font-size="9" fill="white" opacity="0.15">  </text>
        <text x="600" y="200" font-family="monospace" font-size="9" fill="white" opacity="0.15">  return {</text>
        <text x="600" y="215" font-family="monospace" font-size="9" fill="white" opacity="0.15">    result: transform(data),</text>
        <text x="600" y="230" font-family="monospace" font-size="9" fill="white" opacity="0.15">    timestamp: Date.now(),</text>
        <text x="600" y="245" font-family="monospace" font-size="9" fill="white" opacity="0.15">    status: 'success'</text>
        <text x="600" y="260" font-family="monospace" font-size="9" fill="white" opacity="0.15">  };</text>
        <text x="600" y="275" font-family="monospace" font-size="9" fill="white" opacity="0.15">}</text>
      </g>
      
      <!-- Vertical flow lines -->
      <line x1="325" y1="20" x2="325" y2="580" stroke="white" stroke-width="0.5" opacity="0.05" />
      <line x1="475" y1="20" x2="475" y2="580" stroke="white" stroke-width="0.5" opacity="0.05" />
      
      <!-- Horizontal connector lines -->
      <line x1="100" y1="200" x2="700" y2="200" stroke="white" stroke-width="0.5" opacity="0.03" />
      <line x1="150" y1="350" x2="650" y2="350" stroke="white" stroke-width="0.5" opacity="0.03" />
      <line x1="200" y1="500" x2="600" y2="500" stroke="white" stroke-width="0.5" opacity="0.03" />
      
      <!-- Small details dots -->
      <circle cx="325" cy="200" r="2" fill="white" opacity="0.1" />
      <circle cx="475" cy="200" r="2" fill="white" opacity="0.1" />
      <circle cx="325" cy="350" r="2" fill="white" opacity="0.1" />
      <circle cx="475" cy="350" r="2" fill="white" opacity="0.1" />
      <circle cx="325" cy="500" r="2" fill="white" opacity="0.1" />
      <circle cx="475" cy="500" r="2" fill="white" opacity="0.1" />
    </pattern>
  </defs>
  
  <!-- Apply the pattern -->
  <rect width="100%" height="100%" fill="url(#transition-pattern)" />
</svg> 